version: 2.1
orbs:
  node: circleci/node@6.1.0

jobs:
  setup:
    docker:
      - image: cimg/node:20.17.0
    steps:
      - checkout
      - node/install:
          node-version: 20.17.0
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          override-ci-command: npm ci
      - node/install-packages:
          pkg-manager: npm
          app-dir: ~/project/client
          cache-path: ~/project/client/node_modules
          override-ci-command: npm ci
      - node/install-packages:
          pkg-manager: npm
          app-dir: ~/project/server
          cache-path: ~/project/server/node_modules
          override-ci-command: npm ci
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: cimg/node:20.17.0
    steps:
      - attach_workspace:
          at: .
      - node/install:
          node-version: 20.17.0
      - run:
          name: Run ESLint
          command: npx eslint . --config .eslintrc.json || true
      - run:
          name: Run tests
          command: npm test --prefix client

  build:
    docker:
      - image: cimg/node:20.17.0
    steps:
      - attach_workspace:
          at: .
      - node/install:
          node-version: 20.17.0
      - run:
          name: Build client
          command: npm run build --prefix client
      - run:
          name: Build server
          command: npm run build --prefix server
      - persist_to_workspace:
          root: .
          paths:
            - client/build
            - server/dist
            - server/package.json
            - server/package-lock.json

  deploy:
    docker:
      - image: cimg/node:20.17.0
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - add_ssh_keys:
          fingerprints:
            - "SHA256:6+qHFQDbqCYFzFzHfY7fpBaly2rEB83DUxswOGj6dkI"
      - run:
          name: Setup and Debug Environment
          command: |
            unset DEPLOY_PATH
            echo 'export SSH_USER=${SSH_USER}' >> "$BASH_ENV"
            echo 'export SSH_HOST=${SSH_HOST}' >> "$BASH_ENV"
            source "$BASH_ENV"
      - run:
          name: Deploy to Server
          command: |
            source "$BASH_ENV"
            
            scp -r -o StrictHostKeyChecking=no /home/circleci/project/client/build/* $SSH_USER@$SSH_HOST:/var/www/minecraft-skin-merger/client
            ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "ls -la /var/www/minecraft-skin-merger/client || echo 'Client files deployment failed'"
            
            scp -r -o StrictHostKeyChecking=no /home/circleci/project/server/dist/* $SSH_USER@$SSH_HOST:/var/www/minecraft-skin-merger/server
            scp -o StrictHostKeyChecking=no /home/circleci/project/server/package*.json $SSH_USER@$SSH_HOST:/var/www/minecraft-skin-merger/server
            ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "ls -la /var/www/minecraft-skin-merger/server || echo 'Server files deployment failed'"
            
            ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST /<< EOF
              cd /var/www/minecraft-skin-merger/server
              echo "Installing npm production dependencies..."
              npm install --production || echo "npm install failed"
              echo "Restarting PM2..."
              pm2 restart /var/www/minecraft-skin-merger/ecosystem.config.js || echo "PM2 restart failed"
              echo "Restarting Nginx..."
              sudo systemctl restart nginx || echo "Nginx restart failed"
            EOF

workflows:
  setup-test-build-deploy:
    jobs:
      - setup
      - test:
          requires:
            - setup
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master